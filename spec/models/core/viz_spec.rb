require "rails_helper"

RSpec.describe Core::Viz, type: :model do
  before :each do
    @viz = Core::Viz.create({
      name: "TEST_VIZ",
      core_datacast_identifier:"eca3dc6bb26f5c94c2b0ec8cc9d4df1ac29eeeab98684e55e4563190f3831d80e8",
      ref_chart_combination_code: "f80d2e",
      core_project_id: 1,
      filter_present: true,
      filter_column_name: nil,
      filter_column_d_or_m: nil,
      is_autogenerated: true
    })
    @viz.save
    @viz_id = @viz.id
  end

  after :each do
    @viz.delete
  end

  context 'Core::Viz object#auto_html_json' do
    it "should return a proper html object" do
      html = @viz.auto_html_json
      expected_output =  {
        :id=>"test_viz",
        :api=>"PykCharts.multiD.multiSeriesLine",
        :datacast_identifier=>"eca3dc6bb26f5c94c2b0ec8cc9d4df1ac29eeeab98684e55e4563190f3831d80e8",
        :class=>"d3-pykcharts",
        :filter_present=>"true",
        :filter_column_name=>""
      }
      expect(html).to eq(expected_output)
    end
  end

  context 'Core::Viz#find_or_create' do
    it 'should return a new viz' do
      new_viz = Core::Viz.find_or_create(
        'eca3dc6bb26f5c94c2b0ec8cc9d4df1ac29eeeab98684e55e4563190f3831d80e8',
        "Testing_find_or_create",
        "f80d2e",
        1,
        false,
        nil,
        nil
      )
      expect(new_viz.id).not_to eq(@viz_id)
      new_viz.delete
    end

    it 'should return the @viz row from db' do
      previous_viz = Core::Viz.find_or_create(
        "eca3dc6bb26f5c94c2b0ec8cc9d4df1ac29eeeab98684e55e4563190f3831d80e8",
        "TEST_VIZ",
        "f80d2e",
        1,
        true,
        nil,
        nil
      )
      expect(previous_viz.id).to eq(@viz_id)
    end
  end




end
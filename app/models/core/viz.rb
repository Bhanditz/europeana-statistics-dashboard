# frozen_string_literal: true
# == Schema Information
#
# Table name: core_vizs
#
#  id                         :integer          not null, primary key
#  core_project_id            :integer
#  properties                 :hstore
#  created_at                 :datetime
#  updated_at                 :datetime
#  name                       :string
#  config                     :json
#  created_by                 :integer
#  updated_by                 :integer
#  ref_chart_combination_code :string
#  core_datacast_identifier   :string
#  filter_present             :boolean
#  is_autogenerated           :boolean          default(FALSE)
#

class Core::Viz < ActiveRecord::Base
  # GEMS
  self.table_name = 'core_vizs'

  # CONSTANTS
  # ATTRIBUTES
  # ACCESSORS
  store_accessor :properties, :filter_column_name, :filter_column_d_or_m
  # ASSOCIATIONS
  belongs_to :core_project, class_name: 'Core::Project', foreign_key: 'core_project_id'
  belongs_to :ref_chart, class_name: 'Ref::Chart', foreign_key: 'ref_chart_combination_code', primary_key: 'combination_code'
  belongs_to :core_datacast, class_name: 'Core::Datacast', foreign_key: 'core_datacast_identifier', primary_key: 'identifier'
  # VALIDATIONS
  validates :name, uniqueness: { scope: :core_project_id }
  validates :core_datacast_identifier, presence: true

  # CALLBACKS
  before_create :before_create_set

  # SCOPES
  scope :reusable, -> { where("core_vizs.name LIKE '%- Reusables'") }
  scope :top_country, -> { where("core_vizs.name LIKE '%- Top Countries'") }
  scope :line_chart, -> { where("core_vizs.name LIKE '%- Line Chart'") }
  scope :media_type_donut_chart, -> { where("core_vizs.name LIKE '%- Media Type Donut Chart'") }
  scope :manual, -> { where(is_autogenerated: false) }

  # CUSTOM SCOPES
  # FUNCTIONS

  # Retruns the name of the visualization.
  def to_s
    name
  end

  # Generates an object that is used to create charts.
  #
  # @return [Object] used to create a chart.
  def auto_html_json
    obj = {
      id: (ERB::Util.h name.parameterize('_')).to_s,
      api: (ERB::Util.h ref_chart.api).to_s,
      datacast_identifier: (ERB::Util.h core_datacast_identifier).to_s,
      class: ('One Number indicators' == ref_chart.name ? 'card_with_value' : 'd3-pykcharts').to_s,
      filter_present: (ERB::Util.h filter_present).to_s,
      filter_column_name: (ERB::Util.h filter_column_name).to_s
    }
    obj
  end

  # Either creates a new Core::Viz or returns an existing Core::Viz object from the database.
  #
  # @param core_datacast_identifier [String] a securehex string.
  # @param name [String] name of the visualization.
  # @param ref_chart_combination_code [String] it is a reference to Ref::Chart
  # @param core_project_id [Fixnum] reference to the Core::Project.
  # @param filter_present [Boolean] a boolean field to indicate whether the filter is present or not.
  # @param filter_column_name [String] name of the column on which filter is to be applied.
  # @param filter_column_d_or_m [String] indicates whether the filter column is dimension or metric.
  # @param validate [Boolean] indicates whether the object is to be saved with or without validation (default true)
  # @param is_autogenerated [Boolean] indicates whether the visualization is generated by jobs or manually (default false)
  # @return [Object] a reference to Core::Viz
  def self.find_or_create(core_datacast_identifier, name, ref_chart_combination_code, core_project_id, filter_present, filter_column_name, filter_column_d_or_m, validate = true, is_autogenerated = false)
    a = where(core_datacast_identifier: core_datacast_identifier, name: name, ref_chart_combination_code: ref_chart_combination_code, core_project_id: core_project_id).first
    if a.blank?
      a = new(core_datacast_identifier: core_datacast_identifier, name: name, ref_chart_combination_code: ref_chart_combination_code, core_project_id: core_project_id, filter_present: filter_present, filter_column_name: filter_column_name, filter_column_d_or_m: filter_column_d_or_m, is_autogenerated: is_autogenerated)
      a.save(validate: validate)
    end
    a
  end

  # PRIVATE
  private

  def before_create_set
    if ref_chart.slug == 'grid'
      self.config = {
        'data' => {},
        'readOnly' => true,
        'fixedRowsTop' => 0,
        'colHeaders' => [],
        'manualColumnMove' => true,
        'outsideClickDeselects' => false,
        'contextMenu' => false
      }
    elsif config.blank?
      self.config = Core::Theme.default_theme.config
    end
    true
  end
end
